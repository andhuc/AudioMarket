@inject AudioMarketContext dbContext
@{
    String username = Context.Session.GetString("user");
    User user = null;
    List<Favorite> favorites = new List<Favorite>();
    if (username != null)
    {
        user = dbContext.Users.FirstOrDefault(u => u.username == username);
        favorites = user.Favorites.ToList();
    }
}
@model Audio

<div class="row justify-content-center">

    <div class="col-6">

        <div class="position-relative">

            <img src="@Model.image" class="position-absolute w-100 rounded" style="z-index: -1; opacity: 0.5;">

        </div>

        <div class="text-center flex-column" id="audioDetails">

            <h3 class="fw-bold mt-5">
                @Model.title.ToUpper()

                @if (username != null)
                {
                    <div>
                        @* favorite *@
                        @if (@favorites.Any(f => f.audioId == Model.id))
                        {
                            <i class="bi fs-4 bi-heart-fill" onclick="updateFavorite(@user.id, @Model.id, this)"></i>
                        }
                        else
                        {
                            <i class="bi fs-4 bi-heart" onclick="updateFavorite(@user.id, @Model.id, this)"></i>
                        }

                    </div>
                }
            </h3>

            <p class="mt-5">@Model.Genre.genre  -  @Model.Mood.moodName</p>

            <div>
                @if (username != null)
                {
                    @* make order *@
                    @* <i class="bi bi-cart" style="font-size: 10rem;"></i> *@
                    <button class="btn btn-light" onclick="addToCart('@username', @Model.id)">Add to cart</button>
                }
            </div>

            <div class="rounded-circle btn border-0" onclick="play('@Model.filename', '@Model.image', @Model.id, '@Model.title')" id="playButton">
                <i class ="bi bi-play text-white" style="font-size: 9rem"></i>
            </div>


        </div>

    </div>

</div>

<div class="toast position-fixed" role="alert" aria-live="assertive" aria-atomic="true" style="right: 0; z-index: 2; top: 10vh">
    <div class="toast-header text-black">
        <strong class="mr-auto">Notification</strong>
    </div>
    <div class="toast-body text-black" id="toastContent">
        Added to cart!
    </div>
</div>

<script>

    const playButton = document.getElementById("playButton");

    document.getElementById('audioDetails').addEventListener("mouseover", function () {
        playButton.style.visibility = 'visible';
    });

    document.getElementById('audioDetails').addEventListener("mouseout", function () {
        playButton.style.visibility = 'hidden';
    });

    function updateFavorite(userId, audioId, heartIcon) {

        if (heartIcon.classList.contains("bi-heart-fill")) {
            heartIcon.classList.remove("bi-heart-fill");
            heartIcon.classList.add("bi-heart");
        } else if (heartIcon.classList.contains("bi-heart")) {
            // Check if it contains "bi-heart" class and toggle it with "bi-heart-fill"
            heartIcon.classList.remove("bi-heart");
            heartIcon.classList.add("bi-heart-fill");
        }

        fetch(`../Favor?userId=${userId}&audioId=${audioId}`)
    }

    function getCookieCart(name) {
        const cookieName = name + "=";
        const decodedCookies = decodeURIComponent(document.cookie);
        const cookieArray = decodedCookies.split(";");

        for (let i = 0; i < cookieArray.length; i++) {
            let cookie = cookieArray[i].trim();
            if (cookie.indexOf(cookieName) === 0) {
                return cookie.substring(cookieName.length);
            }
        }
        return ''; // Cookie not found
    }

    function addToCart(username, audioId) {
        
        let cartName = username + '-audiocart';
        let cookieValue = getCookieCart(cartName);
        let audioIdCookie = `${audioId}-`;

        if (!cookieValue.includes(audioIdCookie)) {
            cookieValue += audioIdCookie;
            showToast('✅Added to cart!');
        } else {
            showToast('Already in the cart!');
        }

        document.cookie = cartName + "=" + cookieValue + "; path=/";

    }

    function showToast(message) {
        const toastContent = document.getElementById('toastContent');
        toastContent.textContent = message;
        $('.toast').toast('show')
    }
</script>

@* <script>
    const audio = document.getElementById('audio');
    const playButton = document.getElementById('playButton');
    const pauseButton = document.getElementById('pauseButton');
    const seekSlider = document.getElementById('seekSlider');
    const volumeSlider = document.getElementById('volumeSlider');

    function updateControls() {
        seekSlider.value = audio.currentTime;
        volumeSlider.value = audio.volume;
    }

    function seekAudio() {
        audio.currentTime = seekSlider.value;
    }

    function setVolume() {
        audio.volume = volumeSlider.value;
    }

    playButton.addEventListener('click', () => {
        audio.play();
    });

    pauseButton.addEventListener('click', () => {
        audio.pause();
    });

    seekSlider.addEventListener('input', seekAudio);

    volumeSlider.addEventListener('input', setVolume);

    audio.addEventListener('timeupdate', updateControls);

    audio.addEventListener('ended', () => {
        playButton.disabled = false;
        pauseButton.disabled = true;
    });
</script> *@
